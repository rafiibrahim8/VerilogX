/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package verilogx;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.exec.CommandLine;

/**
 *
 * @author ibrahim
 */
public class VerilogX extends javax.swing.JFrame {

    public static final String VERSION = "0.1";

    public static final int FILES = 0;
    public static final int FOLDER = 1;

    private File last_fc_loc;
    private ArrayList<String> openedFiles;
    private int currentMode;
    private String folderPath;
    private DefaultListModel model;

    public VerilogX() {
        initComponents();
        initVars();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JScrollPane fileScroll = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        simTime = new javax.swing.JTextField();
        simTimeUnit = new javax.swing.JComboBox<>();
        doSim = new javax.swing.JButton();
        javax.swing.JScrollPane displayScroll = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        javax.swing.JLabel simLabel = new javax.swing.JLabel();
        folderLabel = new javax.swing.JLabel();
        logAndDisplay = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        miOpenFolder = new javax.swing.JMenuItem();
        miAddFile = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VerilogX");
        setIconImage(Utils.getIcon());
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fileList.setFont(menuBar.getFont());
        fileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fileScroll.setViewportView(fileList);

        getContentPane().add(fileScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 550, 190));

        simTime.setFont(menuBar.getFont());
        simTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        simTime.setText("1");
        simTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simTimeActionPerformed(evt);
            }
        });
        getContentPane().add(simTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 50, 90, 30));

        simTimeUnit.setFont(menuBar.getFont());
        simTimeUnit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ns", "us", "ms", "s" }));
        getContentPane().add(simTimeUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 50, -1, 30));

        doSim.setFont(menuBar.getFont());
        doSim.setText("Simulate");
        doSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doSimActionPerformed(evt);
            }
        });
        getContentPane().add(doSim, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 90, 170, -1));

        display.setColumns(20);
        display.setFont(new java.awt.Font("Courier", 0, 14)); // NOI18N
        display.setRows(5);
        displayScroll.setViewportView(display);

        getContentPane().add(displayScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 780, 280));

        simLabel.setFont(menuBar.getFont());
        simLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        simLabel.setText("Simulate Selected Item");
        getContentPane().add(simLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, 160, -1));

        folderLabel.setFont(fileMenu.getFont());
        folderLabel.setText("Opened Files: ");
        getContentPane().add(folderLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 500, -1));

        logAndDisplay.setFont(fileMenu.getFont());
        logAndDisplay.setText("Display and Logs:");
        getContentPane().add(logAndDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, -1));

        jButton1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButton1.setText(""+'\u27F3');
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(517, 0, 40, -1));

        menuBar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        fileMenu.setText("File");
        fileMenu.setFont(menuBar.getFont());

        miOpenFolder.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miOpenFolder.setFont(menuBar.getFont());
        miOpenFolder.setText("Open Folder");
        miOpenFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenFolderActionPerformed(evt);
            }
        });
        fileMenu.add(miOpenFolder);

        miAddFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miAddFile.setFont(menuBar.getFont());
        miAddFile.setText("Add FIle");
        miAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddFileActionPerformed(evt);
            }
        });
        fileMenu.add(miAddFile);

        miExit.setFont(menuBar.getFont());
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        fileMenu.add(miExit);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");
        helpMenu.setFont(fileMenu.getFont());

        about.setFont(menuBar.getFont());
        about.setLabel("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        helpMenu.add(about);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miOpenFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenFolderActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(last_fc_loc);
        fc.setDialogTitle("Choose Folder");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            populateFileList(new File[]{fc.getSelectedFile()}, FOLDER);
        }
        last_fc_loc = fc.getCurrentDirectory();
    }//GEN-LAST:event_miOpenFolderActionPerformed

    private void miAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddFileActionPerformed
        FileFilterer ff = new FileFilterer("Verilog files (.v)", new String[]{".v"}, true);
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(last_fc_loc);
        fc.setDialogTitle("Choose Verilog Files");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(true);
        fc.setFileFilter(ff);
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            populateFileList(fc.getSelectedFiles(), FILES);
        }
        last_fc_loc = fc.getCurrentDirectory();
    }//GEN-LAST:event_miAddFileActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_miExitActionPerformed

    private void simTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_simTimeActionPerformed

    private void doSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doSimActionPerformed
        if (fileList.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "Please select a file to simulate.");
            return;
        }

        try {
            Float.parseFloat(simTime.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Invalid Simulation Time.");
            return;
        }

        String tempDir = System.getProperty("java.io.tmpdir");
        if (tempDir == null) {
            JOptionPane.showMessageDialog(null, "ERR: TEMP_DIR\nPlease submit a bug report.");
            return;
        }

        String filePath = fileList.getSelectedValue();
        File tempDirFile = new File(tempDir, "VerilogX");
        if (!tempDirFile.exists()) {
            tempDirFile.mkdir();
        }

        for (File f : tempDirFile.listFiles()) {
            Utils.deleteRecursive(f);
        }
        tempDir = tempDirFile.getAbsolutePath();
        simulate(filePath, tempDir);
    }//GEN-LAST:event_doSimActionPerformed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        JOptionPane.showMessageDialog(null,
                "VerilogX v" + VERSION + System.lineSeparator()
                + "by Ibrahim Rafi" + System.lineSeparator()
                + "Visit: https://github.com/rafiibrahim8/VerilogX to learn more or report a bug." + System.lineSeparator()
                + System.lineSeparator()
                + "WARNING: THIS SOFTWARE WAS RELEASED UNDER MIT LICENSE AND COMES WITH ABSOLUTELY NO WARRANTY.");
    }//GEN-LAST:event_aboutActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (currentMode == FOLDER) {
            File folderPath_ = new File(folderPath);
            populateFileList(new File[]{folderPath_}, FOLDER);
        } else if (currentMode == FILES) {
            String[] list = (String[]) openedFiles.toArray(new String[0]);
            for (String s : list) {
                if (!new File(s).exists()) {
                    model.removeElement(s);
                    openedFiles.remove(s);
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerilogX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerilogX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerilogX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerilogX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VerilogX().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JTextArea display;
    private javax.swing.JButton doSim;
    private javax.swing.JList<String> fileList;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel folderLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel logAndDisplay;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem miAddFile;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miOpenFolder;
    private javax.swing.JTextField simTime;
    private javax.swing.JComboBox<String> simTimeUnit;
    // End of variables declaration//GEN-END:variables

    private void initVars() {
        last_fc_loc = null;
        openedFiles = new ArrayList<>();
        model = new DefaultListModel();
        fileList.setModel(model);
        currentMode = 999;
        folderPath = null;
        display.setEditable(false);
    }

    private void populateFileList(File[] files, int type) {
        if (type == FILES) {
            if (currentMode == FOLDER) {
                folderPath = null;
                model.removeAllElements();
                openedFiles.clear();
            }
            currentMode = FILES;
            folderLabel.setText("Opened Files: ");
            for (File f : files) {
                if (Utils.checkExist(openedFiles, f.getAbsolutePath())) {
                    JOptionPane.showMessageDialog(null, "File already exist in VerilogX:\n" + f.getAbsolutePath());
                } else {
                    model.addElement(f.getAbsolutePath());
                    openedFiles.add(f.getAbsolutePath());
                }
            }
        } else {
            currentMode = FOLDER;
            folderPath = files[0].getAbsolutePath();
            folderLabel.setText("Opened Folder: " + folderPath);
            model.removeAllElements();
            openedFiles.clear();
            for (File f : files[0].listFiles(Utils.verilogOnlyFilter())) {
                model.addElement(f.getName());
                openedFiles.add(f.getName());
            }
        }
    }

    private void simulate(String filePath, String tempDir) {
        try {
            File actualFile = (currentMode == FILES) ? new File(filePath) : new File(folderPath, filePath);
            StringX content = new StringX(Files.readAllBytes(actualFile.toPath()));
            Utils.nativeNewline(content);

            int simTimeHash = Utils.getSimTimeHash(Utils.getTimeScale(content), simTime.getText(), simTimeUnit.getSelectedItem().toString());
            String moduleName = Utils.getModuleName(content);

            String vcdFilePath = new File(tempDir, "dump.vcd").getAbsolutePath();
            Utils.addSimParams(content, vcdFilePath, moduleName, simTimeHash);

            File tempVerilogFile = new File(tempDir, moduleName + ".v");
            Files.write(tempVerilogFile.toPath(), content.toString().getBytes());

            String[] subModules = Utils.getSubs(openedFiles, folderPath, filePath);

            String vvpFilePath = tempDir + File.separator + "dump.vvp";

            CommandLine[] command = new CommandLine[3];
            command[0] = new CommandLine("iverilog");
            command[0].addArgument("-o");
            command[0].addArgument(vvpFilePath, false);
            command[0].addArgument("-s");
            command[0].addArgument(moduleName);
            command[0].addArgument(tempVerilogFile.getAbsolutePath(), false);
            command[0].addArguments(subModules, false);

            command[1] = new CommandLine("vvp");
            command[1].addArgument(vvpFilePath);

            command[2] = new CommandLine("gtkwave");
            command[2].addArgument(vcdFilePath);

            new Thread(() -> {
                runSimCommand(command, tempDir);
            }).start();

        } catch (IOException ex) {
            Logger.getLogger(VerilogX.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void runSimCommand(CommandLine[] commands, String tempDir) {
        try {
            for (CommandLine command : commands) {
                ExecResult out = Utils.runCommand(command);
                if (!command.getExecutable().equals("gtkwave")) { //GTKwave logs too much.
                    dumpDisplay(out.getResultString(), tempDir + File.separator);
                } else {
                    System.out.println(out.getResultString());
                }
                if (out.getResultCode() != 0) {
                    return;
                }

            }

        } catch (Exception ex) {
            Logger.getLogger(VerilogX.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void dumpDisplay(String resultString, String toRemove) {
        display.append(resultString.replace(toRemove, "") + System.lineSeparator());
    }

}
